// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id                String         @id @default(cuid())
  name              String?
  email             String?        @unique
  emailVerified     DateTime?
  password          String?
  image             String?
  dlsId             String?
  binanceApiKey     String?
  binanceApiSecret  String?
  binanceConnected  Boolean        @default(false)
  accounts          Account[]
  sessions          Session[]
  createdMatches    Match[]        @relation("Creator")
  joinedMatches     Match[]        @relation("Joiner")
  wonMatches        Match[]        @relation("Winner")
  lostMatches       Match[]        @relation("Loser")
  transactions      Transaction[]
  stats             UserStats?
  settings          UserSettings?
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Match {
  id          String    @id @default(cuid())
  matchCode   String    @unique
  wagerAmount Float
  wagerTier   String
  status      String    // WAITING, IN_PROGRESS, COMPLETED, DISPUTED
  isRandom    Boolean   @default(false)
  creatorId   String
  joinerId    String?
  winnerId    String?
  loserId     String?
  createdAt   DateTime  @default(now())
  startedAt   DateTime?
  completedAt DateTime?
  platformFee Float?
  disputeReason String?

  creator     User      @relation("Creator", fields: [creatorId], references: [id])
  joiner      User?     @relation("Joiner", fields: [joinerId], references: [id])
  winner      User?     @relation("Winner", fields: [winnerId], references: [id])
  loser       User?     @relation("Loser", fields: [loserId], references: [id])
}

model Transaction {
  id        String   @id @default(cuid())
  userId    String
  type      String   // RESERVE, RELEASE, CREDIT, DEBIT
  amount    Float
  status    String   // PENDING, COMPLETED, FAILED
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user      User     @relation(fields: [userId], references: [id])
}

model UserStats {
  id            String   @id @default(cuid())
  userId        String   @unique
  totalGames    Int      @default(0)
  totalWins     Int      @default(0)
  totalLosses   Int      @default(0)
  totalEarnings Float    @default(0)
  topEarnings   Float    @default(0)
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  user          User     @relation(fields: [userId], references: [id])
}

model UserSettings {
  id                      String   @id @default(cuid())
  userId                  String   @unique
  transactionNotifications Boolean  @default(true)
  matchNotifications      Boolean  @default(true)
  createdAt               DateTime @default(now())
  updatedAt               DateTime @updatedAt

  user                    User     @relation(fields: [userId], references: [id])
}

